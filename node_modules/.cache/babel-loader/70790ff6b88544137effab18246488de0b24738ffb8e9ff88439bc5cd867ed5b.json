{"ast":null,"code":"import _slicedToArray from\"/Users/andre/speech-to-text-polly/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var SpeechToText=function SpeechToText(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),transcript=_useState2[0],setTranscript=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isListening=_useState4[0],setIsListening=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),isSupported=_useState6[0],setIsSupported=_useState6[1];var toggleListening=function toggleListening(){if(isListening){recognition.stop();}else{recognition.start();}};var recognition=new(window.SpeechRecognition||window.webkitSpeechRecognition)();recognition.onstart=function(){setIsListening(true);};recognition.onresult=function(event){var result=event.results[0][0].transcript;setTranscript(result);};recognition.onend=function(){setIsListening(false);};recognition.onerror=function(event){console.error('Speech recognition error:',event.error);setIsListening(false);};useEffect(function(){if(!('SpeechRecognition'in window)&&!('webkitSpeechRecognition'in window)){setIsSupported(false);}return function(){recognition.stop();};},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Speech to Text\"}),isSupported?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{onClick:toggleListening,children:isListening?'Stop Listening':'Start Listening'}),isListening&&/*#__PURE__*/_jsx(\"p\",{children:\"Listening...\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Transcript: \",transcript]})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Speech recognition is not supported in this browser.\"})]});};export default SpeechToText;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SpeechToText","_useState","_useState2","_slicedToArray","transcript","setTranscript","_useState3","_useState4","isListening","setIsListening","_useState5","_useState6","isSupported","setIsSupported","toggleListening","recognition","stop","start","window","SpeechRecognition","webkitSpeechRecognition","onstart","onresult","event","result","results","onend","onerror","console","error","children","onClick"],"sources":["/Users/andre/speech-to-text-polly/src/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SpeechToText = () => {\n  const [transcript, setTranscript] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [isSupported, setIsSupported] = useState(true);\n\n  const toggleListening = () => {\n    if (isListening) {\n      recognition.stop();\n    } else {\n      recognition.start();\n    }\n  };\n\n  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n\n  recognition.onstart = () => {\n    setIsListening(true);\n  };\n\n  recognition.onresult = (event) => {\n    const result = event.results[0][0].transcript;\n    setTranscript(result);\n  };\n\n  recognition.onend = () => {\n    setIsListening(false);\n  };\n\n  recognition.onerror = (event) => {\n    console.error('Speech recognition error:', event.error);\n    setIsListening(false);\n  };\n\n  useEffect(() => {\n    if (!('SpeechRecognition' in window) && !('webkitSpeechRecognition' in window)) {\n      setIsSupported(false);\n    }\n\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h2>Speech to Text</h2>\n      {isSupported ? (\n        <>\n          <button onClick={toggleListening}>\n            {isListening ? 'Stop Listening' : 'Start Listening'}\n          </button>\n          {isListening && <p>Listening...</p>}\n          <p>Transcript: {transcript}</p>\n        </>\n      ) : (\n        <p>Speech recognition is not supported in this browser.</p>\n      )}\n    </div>\n  );\n};\n\nexport default SpeechToText;\n"],"mappings":"uHAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAEnD,GAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAA,CAAS,CACzB,IAAAC,SAAA,CAAoCT,QAAQ,CAAC,EAAE,CAAC,CAAAU,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAzCG,UAAU,CAAAF,UAAA,IAAEG,aAAa,CAAAH,UAAA,IAChC,IAAAI,UAAA,CAAsCd,QAAQ,CAAC,KAAK,CAAC,CAAAe,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAA9CE,WAAW,CAAAD,UAAA,IAAEE,cAAc,CAAAF,UAAA,IAClC,IAAAG,UAAA,CAAsClB,QAAQ,CAAC,IAAI,CAAC,CAAAmB,UAAA,CAAAR,cAAA,CAAAO,UAAA,IAA7CE,WAAW,CAAAD,UAAA,IAAEE,cAAc,CAAAF,UAAA,IAElC,GAAM,CAAAG,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAA,CAAS,CAC5B,GAAIN,WAAW,CAAE,CACfO,WAAW,CAACC,IAAI,CAAC,CAAC,CACpB,CAAC,IAAM,CACLD,WAAW,CAACE,KAAK,CAAC,CAAC,CACrB,CACF,CAAC,CAED,GAAM,CAAAF,WAAW,CAAG,IAAKG,MAAM,CAACC,iBAAiB,EAAID,MAAM,CAACE,uBAAuB,EAAE,CAAC,CAEtFL,WAAW,CAACM,OAAO,CAAG,UAAM,CAC1BZ,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAEDM,WAAW,CAACO,QAAQ,CAAG,SAACC,KAAK,CAAK,CAChC,GAAM,CAAAC,MAAM,CAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACrB,UAAU,CAC7CC,aAAa,CAACmB,MAAM,CAAC,CACvB,CAAC,CAEDT,WAAW,CAACW,KAAK,CAAG,UAAM,CACxBjB,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,CAEDM,WAAW,CAACY,OAAO,CAAG,SAACJ,KAAK,CAAK,CAC/BK,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAEN,KAAK,CAACM,KAAK,CAAC,CACvDpB,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,CAEDhB,SAAS,CAAC,UAAM,CACd,GAAI,EAAE,mBAAmB,EAAI,CAAAyB,MAAM,CAAC,EAAI,EAAE,yBAAyB,EAAI,CAAAA,MAAM,CAAC,CAAE,CAC9EL,cAAc,CAAC,KAAK,CAAC,CACvB,CAEA,MAAO,WAAM,CACXE,WAAW,CAACC,IAAI,CAAC,CAAC,CACpB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEnB,KAAA,QAAAiC,QAAA,eACEnC,IAAA,OAAAmC,QAAA,CAAI,gBAAc,CAAI,CAAC,CACtBlB,WAAW,cACVf,KAAA,CAAAE,SAAA,EAAA+B,QAAA,eACEnC,IAAA,WAAQoC,OAAO,CAAEjB,eAAgB,CAAAgB,QAAA,CAC9BtB,WAAW,CAAG,gBAAgB,CAAG,iBAAiB,CAC7C,CAAC,CACRA,WAAW,eAAIb,IAAA,MAAAmC,QAAA,CAAG,cAAY,CAAG,CAAC,cACnCjC,KAAA,MAAAiC,QAAA,EAAG,cAAY,CAAC1B,UAAU,EAAI,CAAC,EAC/B,CAAC,cAEHT,IAAA,MAAAmC,QAAA,CAAG,sDAAoD,CAAG,CAC3D,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAA9B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}