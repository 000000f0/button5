{"ast":null,"code":"var _jsxFileName = \"/Users/andre/speech-to-text-polly/src/TextToSpeech.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AWS from 'aws-sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWS_ACCESS_KEY = 'AKIAR22DSRP6A3INZCOZ';\nconst AWS_SECRET_KEY = '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';\nconst TextToSpeech = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [message, setMessage] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n  const handleInputChange = e => {\n    setInputText(e.target.value);\n  };\n  const handleTextToSpeech = async () => {\n    try {\n      // Reset the audio URL to clear the previous audio\n      setAudioUrl('');\n\n      // Initialize Polly client\n      AWS.config.update({\n        accessKeyId: AWS_ACCESS_KEY,\n        secretAccessKey: AWS_SECRET_KEY,\n        region: 'eu-west-1' // AWS Polly region\n      });\n\n      const polly = new AWS.Polly();\n\n      // Synthesize speech\n      const response = await polly.synthesizeSpeech({\n        Text: inputText,\n        OutputFormat: 'mp3',\n        VoiceId: 'Matthew'\n      }).promise();\n\n      // Create a Blob object from the audio stream\n      const blob = new Blob([response.AudioStream], {\n        type: 'audio/mpeg'\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Set the audio URL to play it in the <audio> element\n      setAudioUrl(url);\n      setMessage('Audio synthesis complete.');\n    } catch (error) {\n      if (error.code === 'NoCredentialsError') {\n        setMessage('AWS credentials not found. Make sure to configure your AWS credentials.');\n      } else {\n        setMessage(`An error occurred: ${error.message}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text to Speech Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputText,\n      onChange: handleInputChange,\n      placeholder: \"Enter text to convert to speech\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTextToSpeech,\n      children: \"Convert to Speech\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Audio Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: audioUrl,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), \"Your browser does not support the audio element.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(TextToSpeech, \"7xZDctG2rqqu+xNqd6ub33kGREM=\");\n_c = TextToSpeech;\nexport default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["React","useState","AWS","jsxDEV","_jsxDEV","AWS_ACCESS_KEY","AWS_SECRET_KEY","TextToSpeech","_s","inputText","setInputText","message","setMessage","audioUrl","setAudioUrl","handleInputChange","e","target","value","handleTextToSpeech","config","update","accessKeyId","secretAccessKey","region","polly","Polly","response","synthesizeSpeech","Text","OutputFormat","VoiceId","promise","blob","Blob","AudioStream","type","url","URL","createObjectURL","error","code","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","controls","src","_c","$RefreshReg$"],"sources":["/Users/andre/speech-to-text-polly/src/TextToSpeech.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AWS from 'aws-sdk';\n\nconst AWS_ACCESS_KEY = 'AKIAR22DSRP6A3INZCOZ';\nconst AWS_SECRET_KEY = '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';\n\nconst TextToSpeech = () => {\n  const [inputText, setInputText] = useState('');\n  const [message, setMessage] = useState('');\n  const [audioUrl, setAudioUrl] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputText(e.target.value);\n  };\n\n  const handleTextToSpeech = async () => {\n    try {\n      // Reset the audio URL to clear the previous audio\n      setAudioUrl('');\n\n      // Initialize Polly client\n      AWS.config.update({\n        accessKeyId: AWS_ACCESS_KEY,\n        secretAccessKey: AWS_SECRET_KEY,\n        region: 'eu-west-1', // AWS Polly region\n      });\n\n      const polly = new AWS.Polly();\n\n      // Synthesize speech\n      const response = await polly.synthesizeSpeech({\n        Text: inputText,\n        OutputFormat: 'mp3',\n        VoiceId: 'Matthew',\n      }).promise();\n\n      // Create a Blob object from the audio stream\n      const blob = new Blob([response.AudioStream], { type: 'audio/mpeg' });\n      const url = URL.createObjectURL(blob);\n\n      // Set the audio URL to play it in the <audio> element\n      setAudioUrl(url);\n\n      setMessage('Audio synthesis complete.');\n    } catch (error) {\n      if (error.code === 'NoCredentialsError') {\n        setMessage('AWS credentials not found. Make sure to configure your AWS credentials.');\n      } else {\n        setMessage(`An error occurred: ${error.message}`);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Text to Speech Conversion</h1>\n      <textarea\n        value={inputText}\n        onChange={handleInputChange}\n        placeholder=\"Enter text to convert to speech\"\n      />\n      <button onClick={handleTextToSpeech}>Convert to Speech</button>\n      <p>{message}</p>\n      {audioUrl && (\n        <div>\n          <h2>Audio Output</h2>\n          <audio controls>\n            <source src={audioUrl} type=\"audio/mpeg\" />\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextToSpeech;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}