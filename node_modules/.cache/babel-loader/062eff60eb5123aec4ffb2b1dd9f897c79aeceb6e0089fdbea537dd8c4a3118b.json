{"ast":null,"code":"var _jsxFileName = \"/Users/andre/chatfront/src/SpeachToText.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useWhisper } from '@chengsokdara/use-whisper'; // Make sure to import the useWhisper hook from your package\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhisperTranscription = () => {\n  _s();\n  const {\n    recording,\n    speaking,\n    transcript,\n    transcripting,\n    pauseRecording,\n    startRecording,\n    stopRecording\n  } = useWhisper({\n    apiKey: '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' // Replace with your OpenAI API token\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Whisper Transcription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Recording: \", recording]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Speaking: \", speaking]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Transcripting: \", transcripting]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Transcribed Text: \", transcript.text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => startRecording(),\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => pauseRecording(),\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => stopRecording(),\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(WhisperTranscription, \"3oHYjR22+RRkJzps8oYrN7kDef4=\", false, function () {\n  return [useWhisper];\n});\n_c = WhisperTranscription;\nexport default WhisperTranscription;\nvar _c;\n$RefreshReg$(_c, \"WhisperTranscription\");","map":{"version":3,"names":["React","useWhisper","jsxDEV","_jsxDEV","WhisperTranscription","_s","recording","speaking","transcript","transcripting","pauseRecording","startRecording","stopRecording","apiKey","children","fileName","_jsxFileName","lineNumber","columnNumber","text","onClick","_c","$RefreshReg$"],"sources":["/Users/andre/chatfront/src/SpeachToText.jsx"],"sourcesContent":["import React from 'react';\nimport { useWhisper } from '@chengsokdara/use-whisper'; // Make sure to import the useWhisper hook from your package\n\nconst WhisperTranscription = () => {\n  const {\n    recording,\n    speaking,\n    transcript,\n    transcripting,\n    pauseRecording,\n    startRecording,\n    stopRecording,\n  } = useWhisper({\n    apiKey: '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', // Replace with your OpenAI API token\n  });\n\n  return (\n    <div>\n      <h1>Whisper Transcription</h1>\n      <p>Recording: {recording}</p>\n      <p>Speaking: {speaking}</p>\n      <p>Transcripting: {transcripting}</p>\n      <p>Transcribed Text: {transcript.text}</p>\n      <button onClick={() => startRecording()}>Start</button>\n      <button onClick={() => pauseRecording()}>Pause</button>\n      <button onClick={() => stopRecording()}>Stop</button>\n    </div>\n  );\n};\n\nexport default WhisperTranscription;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,2BAA2B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM;IACJC,SAAS;IACTC,QAAQ;IACRC,UAAU;IACVC,aAAa;IACbC,cAAc;IACdC,cAAc;IACdC;EACF,CAAC,GAAGX,UAAU,CAAC;IACbY,MAAM,EAAE,qDAAqD,CAAE;EACjE,CAAC,CAAC;;EAEF,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9Bf,OAAA;MAAAW,QAAA,GAAG,aAAW,EAACR,SAAS;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7Bf,OAAA;MAAAW,QAAA,GAAG,YAAU,EAACP,QAAQ;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3Bf,OAAA;MAAAW,QAAA,GAAG,iBAAe,EAACL,aAAa;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCf,OAAA;MAAAW,QAAA,GAAG,oBAAkB,EAACN,UAAU,CAACW,IAAI;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1Cf,OAAA;MAAQiB,OAAO,EAAEA,CAAA,KAAMT,cAAc,CAAC,CAAE;MAAAG,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvDf,OAAA;MAAQiB,OAAO,EAAEA,CAAA,KAAMV,cAAc,CAAC,CAAE;MAAAI,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvDf,OAAA;MAAQiB,OAAO,EAAEA,CAAA,KAAMR,aAAa,CAAC,CAAE;MAAAE,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAACb,EAAA,CAzBID,oBAAoB;EAAA,QASpBH,UAAU;AAAA;AAAAoB,EAAA,GATVjB,oBAAoB;AA2B1B,eAAeA,oBAAoB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}