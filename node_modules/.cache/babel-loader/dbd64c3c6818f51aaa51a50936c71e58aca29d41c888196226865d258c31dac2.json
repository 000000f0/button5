{"ast":null,"code":"var _jsxFileName = \"/Users/andre/speech-to-text-polly/src/ApiCallComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ApiCallComponent() {\n  _s();\n  const [clientMessage, setClientMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const handleSubmit = async () => {\n    if (clientMessage.trim() !== '') {\n      try {\n        const serverEndpoint = 'https://deva.ark4.xyz/api'; // Updated endpoint URL\n\n        // Send the message as an object with a 'user_input' key\n        const response = await axios.post(serverEndpoint, {\n          user_input: clientMessage\n        },\n        // Send the message as 'user_input'\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const botResponseText = response.data.response; // Assuming your server responds with 'response'\n\n        // Add the user and bot messages to the list of messages\n        setMessages([...messages, {\n          text: clientMessage,\n          sender: 'user'\n        }, {\n          text: botResponseText,\n          sender: 'bot'\n        }]);\n\n        // Clear the input field\n        setClientMessage('');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: clientMessage,\n        onChange: e => setClientMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(ApiCallComponent, \"L6JMzmeLi5Qwx+4zAU377QBmqtI=\");\n_c = ApiCallComponent;\nexport default ApiCallComponent;\nvar _c;\n$RefreshReg$(_c, \"ApiCallComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ApiCallComponent","_s","clientMessage","setClientMessage","messages","setMessages","handleSubmit","trim","serverEndpoint","response","post","user_input","headers","botResponseText","data","text","sender","error","console","children","className","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/andre/speech-to-text-polly/src/ApiCallComponent.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction ApiCallComponent() {\n  const [clientMessage, setClientMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const handleSubmit = async () => {\n    if (clientMessage.trim() !== '') {\n      try {\n        const serverEndpoint = 'https://deva.ark4.xyz/api'; // Updated endpoint URL\n\n        // Send the message as an object with a 'user_input' key\n        const response = await axios.post(\n          serverEndpoint,\n          { user_input: clientMessage }, // Send the message as 'user_input'\n          {\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }\n        );\n\n        const botResponseText = response.data.response; // Assuming your server responds with 'response'\n\n        // Add the user and bot messages to the list of messages\n        setMessages([\n          ...messages,\n          { text: clientMessage, sender: 'user' },\n          { text: botResponseText, sender: 'bot' },\n        ]);\n\n        // Clear the input field\n        setClientMessage('');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"message-container\">\n        {messages.map((message, index) => (\n          <div\n            key={index}\n            className={`message ${message.sender}`}\n          >\n            {message.text}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          value={clientMessage}\n          onChange={(e) => setClientMessage(e.target.value)}\n        />\n        <button onClick={handleSubmit}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ApiCallComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIJ,aAAa,CAACK,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC/B,IAAI;QACF,MAAMC,cAAc,GAAG,2BAA2B,CAAC,CAAC;;QAEpD;QACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAC/BF,cAAc,EACd;UAAEG,UAAU,EAAET;QAAc,CAAC;QAAE;QAC/B;UACEU,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CACF,CAAC;QAED,MAAMC,eAAe,GAAGJ,QAAQ,CAACK,IAAI,CAACL,QAAQ,CAAC,CAAC;;QAEhD;QACAJ,WAAW,CAAC,CACV,GAAGD,QAAQ,EACX;UAAEW,IAAI,EAAEb,aAAa;UAAEc,MAAM,EAAE;QAAO,CAAC,EACvC;UAAED,IAAI,EAAEF,eAAe;UAAEG,MAAM,EAAE;QAAM,CAAC,CACzC,CAAC;;QAEF;QACAb,gBAAgB,CAAC,EAAE,CAAC;MACtB,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;EACF,CAAC;EAED,oBACElB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAKqB,SAAS,EAAC,mBAAmB;MAAAD,QAAA,EAC/Bf,QAAQ,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BxB,OAAA;QAEEqB,SAAS,EAAG,WAAUE,OAAO,CAACN,MAAO,EAAE;QAAAG,QAAA,EAEtCG,OAAO,CAACP;MAAI,GAHRQ,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN5B,OAAA;MAAKqB,SAAS,EAAC,YAAY;MAAAD,QAAA,gBACzBpB,OAAA;QACE6B,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,sBAAsB;QAClCC,KAAK,EAAE5B,aAAc;QACrB6B,QAAQ,EAAGC,CAAC,IAAK7B,gBAAgB,CAAC6B,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eACF5B,OAAA;QAAQmC,OAAO,EAAE5B,YAAa;QAAAa,QAAA,EAAC;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC1B,EAAA,CA7DQD,gBAAgB;AAAAmC,EAAA,GAAhBnC,gBAAgB;AA+DzB,eAAeA,gBAAgB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}