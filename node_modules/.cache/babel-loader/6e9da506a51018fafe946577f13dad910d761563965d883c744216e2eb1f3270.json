{"ast":null,"code":"var _jsxFileName = \"/Users/andre/speech-to-text-polly/src/TextToSpeech.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AWS from 'aws-sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextToSpeech = ({\n  text,\n  onApiResponse\n}) => {\n  _s();\n  const [audioUrl, setAudioUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const handleTextToSpeech = async () => {\n    try {\n      // Reset the audio URL to clear the previous audio\n      setAudioUrl('');\n\n      // Initialize Polly client\n      AWS.config.update({\n        accessKeyId: 'YOUR_AWS_ACCESS_KEY',\n        secretAccessKey: 'YOUR_AWS_SECRET_KEY',\n        region: 'YOUR_AWS_REGION' // AWS Polly region\n      });\n\n      const polly = new AWS.Polly();\n\n      // Synthesize speech\n      const response = await polly.synthesizeSpeech({\n        Text: text,\n        OutputFormat: 'mp3',\n        VoiceId: 'Matthew'\n      }).promise();\n\n      // Create a Blob object from the audio stream\n      const blob = new Blob([response.AudioStream], {\n        type: 'audio/mpeg'\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Set the audio URL to play it in the <audio> element\n      setAudioUrl(url);\n      setMessage('Audio synthesis complete.');\n      onApiResponse('Audio synthesis complete.'); // Send the API response to the parent component\n    } catch (error) {\n      if (error.code === 'NoCredentialsError') {\n        setMessage('AWS credentials not found. Make sure to configure your AWS credentials.');\n      } else {\n        setMessage(`An error occurred: ${error.message}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Text to Speech Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTextToSpeech,\n      children: \"Convert to Speech\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Audio Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: audioUrl,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), \"Your browser does not support the audio element.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(TextToSpeech, \"rcFSHkhmZangE8owGG71y6ULO1Y=\");\n_c = TextToSpeech;\nexport default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["React","useState","AWS","jsxDEV","_jsxDEV","TextToSpeech","text","onApiResponse","_s","audioUrl","setAudioUrl","message","setMessage","handleTextToSpeech","config","update","accessKeyId","secretAccessKey","region","polly","Polly","response","synthesizeSpeech","Text","OutputFormat","VoiceId","promise","blob","Blob","AudioStream","type","url","URL","createObjectURL","error","code","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","controls","src","_c","$RefreshReg$"],"sources":["/Users/andre/speech-to-text-polly/src/TextToSpeech.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AWS from 'aws-sdk';\n\nconst TextToSpeech = ({ text, onApiResponse }) => {\n  const [audioUrl, setAudioUrl] = useState('');\n  const [message, setMessage] = useState('');\n\n  const handleTextToSpeech = async () => {\n    try {\n      // Reset the audio URL to clear the previous audio\n      setAudioUrl('');\n\n      // Initialize Polly client\n      AWS.config.update({\n        accessKeyId: 'YOUR_AWS_ACCESS_KEY',\n        secretAccessKey: 'YOUR_AWS_SECRET_KEY',\n        region: 'YOUR_AWS_REGION', // AWS Polly region\n      });\n\n      const polly = new AWS.Polly();\n\n      // Synthesize speech\n      const response = await polly.synthesizeSpeech({\n        Text: text,\n        OutputFormat: 'mp3',\n        VoiceId: 'Matthew',\n      }).promise();\n\n      // Create a Blob object from the audio stream\n      const blob = new Blob([response.AudioStream], { type: 'audio/mpeg' });\n      const url = URL.createObjectURL(blob);\n\n      // Set the audio URL to play it in the <audio> element\n      setAudioUrl(url);\n\n      setMessage('Audio synthesis complete.');\n      onApiResponse('Audio synthesis complete.'); // Send the API response to the parent component\n    } catch (error) {\n      if (error.code === 'NoCredentialsError') {\n        setMessage('AWS credentials not found. Make sure to configure your AWS credentials.');\n      } else {\n        setMessage(`An error occurred: ${error.message}`);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h2>Text to Speech Conversion</h2>\n      <button onClick={handleTextToSpeech}>Convert to Speech</button>\n      <p>{message}</p>\n      {audioUrl && (\n        <div>\n          <h3>Audio Output</h3>\n          <audio controls>\n            <source src={audioUrl} type=\"audio/mpeg\" />\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextToSpeech;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}