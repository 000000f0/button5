{"ast":null,"code":"var _jsxFileName = \"/Users/andre/speech-to-text-polly/src/all.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AWS from 'aws-sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpeechToText = ({\n  onTranscription\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [isSupported, setIsSupported] = useState(true);\n  const toggleListening = () => {\n    if (isListening) {\n      recognition.stop();\n    } else {\n      recognition.start();\n    }\n  };\n  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n  recognition.onstart = () => {\n    setIsListening(true);\n  };\n  recognition.onresult = event => {\n    const result = event.results[0][0].transcript;\n    onTranscription(result);\n  };\n  recognition.onend = () => {\n    setIsListening(false);\n  };\n  recognition.onerror = event => {\n    console.error('Speech recognition error:', event.error);\n    setIsListening(false);\n  };\n  useEffect(() => {\n    if (!('SpeechRecognition' in window) && !('webkitSpeechRecognition' in window)) {\n      setIsSupported(false);\n    }\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Speech to Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), isSupported && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleListening,\n        children: isListening ? 'Stop Listening' : 'Start Listening'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), isListening && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Listening...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true), !isSupported && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Speech recognition is not supported in this browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"NAEDb33WbAfb4QNzhGLi3Y58huE=\");\n_c = SpeechToText;\nconst TextToSpeech = ({\n  textToSpeak\n}) => {\n  _s2();\n  const [audioUrl, setAudioUrl] = useState('');\n  const [message, setMessage] = useState('');\n  const handleTextToSpeech = async () => {\n    try {\n      setAudioUrl('');\n      AWS.config.update({\n        accessKeyId: 'YOUR_AWS_ACCESS_KEY',\n        secretAccessKey: 'YOUR_AWS_SECRET_KEY',\n        region: 'YOUR_AWS_REGION'\n      });\n      const polly = new AWS.Polly();\n      const response = await polly.synthesizeSpeech({\n        Text: textToSpeak,\n        OutputFormat: 'mp3',\n        VoiceId: 'Matthew'\n      }).promise();\n      const blob = new Blob([response.AudioStream], {\n        type: 'audio/mpeg'\n      });\n      const url = URL.createObjectURL(blob);\n      setAudioUrl(url);\n      setMessage('Audio synthesis complete.');\n    } catch (error) {\n      setMessage(error.code === 'NoCredentialsError' ? 'AWS credentials not found. Make sure to configure your AWS credentials.' : `An error occurred: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Text to Speech Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTextToSpeech,\n      children: \"Convert to Speech\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Audio Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: audioUrl,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), \"Your browser does not support the audio element.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s2(TextToSpeech, \"rcFSHkhmZangE8owGG71y6ULO1Y=\");\n_c2 = TextToSpeech;\nconst App = () => {\n  _s3();\n  const [transcribedText, setTranscribedText] = useState('');\n  const [apiResponse, setApiResponse] = useState('');\n  const handleTranscription = text => {\n    setTranscribedText(text);\n  };\n  const handleSendToApi = async () => {\n    try {\n      const serverEndpoint = 'YOUR_API_ENDPOINT';\n      const response = await axios.post(serverEndpoint, {\n        text: transcribedText\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const apiResponseText = response.data.response;\n      setApiResponse(apiResponseText);\n\n      // Automatically start text-to-speech when the API response is received\n      if (apiResponseText) {\n        await handleTextToSpeech(apiResponseText);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SpeechToText, {\n      onTranscription: handleTranscription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), transcribedText && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendToApi,\n        children: \"Send to API\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextToSpeech, {\n        textToSpeak: apiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s3(App, \"ujrcG+P67m0fdzpyLmilp1BUYTE=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SpeechToText\");\n$RefreshReg$(_c2, \"TextToSpeech\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","AWS","jsxDEV","_jsxDEV","Fragment","_Fragment","SpeechToText","onTranscription","_s","isListening","setIsListening","isSupported","setIsSupported","toggleListening","recognition","stop","start","window","SpeechRecognition","webkitSpeechRecognition","onstart","onresult","event","result","results","transcript","onend","onerror","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","TextToSpeech","textToSpeak","_s2","audioUrl","setAudioUrl","message","setMessage","handleTextToSpeech","config","update","accessKeyId","secretAccessKey","region","polly","Polly","response","synthesizeSpeech","Text","OutputFormat","VoiceId","promise","blob","Blob","AudioStream","type","url","URL","createObjectURL","code","controls","src","_c2","App","_s3","transcribedText","setTranscribedText","apiResponse","setApiResponse","handleTranscription","text","handleSendToApi","serverEndpoint","post","headers","apiResponseText","data","_c3","$RefreshReg$"],"sources":["/Users/andre/speech-to-text-polly/src/all.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AWS from 'aws-sdk';\n\nconst SpeechToText = ({ onTranscription }) => {\n  const [isListening, setIsListening] = useState(false);\n  const [isSupported, setIsSupported] = useState(true);\n\n  const toggleListening = () => {\n    if (isListening) {\n      recognition.stop();\n    } else {\n      recognition.start();\n    }\n  };\n\n  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n\n  recognition.onstart = () => {\n    setIsListening(true);\n  };\n\n  recognition.onresult = (event) => {\n    const result = event.results[0][0].transcript;\n    onTranscription(result);\n  };\n\n  recognition.onend = () => {\n    setIsListening(false);\n  };\n\n  recognition.onerror = (event) => {\n    console.error('Speech recognition error:', event.error);\n    setIsListening(false);\n  };\n\n  useEffect(() => {\n    if (!('SpeechRecognition' in window) && !('webkitSpeechRecognition' in window)) {\n      setIsSupported(false);\n    }\n\n    return () => {\n      recognition.stop();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h2>Speech to Text</h2>\n      {isSupported && (\n        <>\n          <button onClick={toggleListening}>\n            {isListening ? 'Stop Listening' : 'Start Listening'}\n          </button>\n          {isListening && <p>Listening...</p>}\n        </>\n      )}\n      {!isSupported && <p>Speech recognition is not supported in this browser.</p>}\n    </div>\n  );\n};\n\nconst TextToSpeech = ({ textToSpeak }) => {\n  const [audioUrl, setAudioUrl] = useState('');\n  const [message, setMessage] = useState('');\n\n  const handleTextToSpeech = async () => {\n    try {\n      setAudioUrl('');\n      AWS.config.update({\n        accessKeyId: 'YOUR_AWS_ACCESS_KEY',\n        secretAccessKey: 'YOUR_AWS_SECRET_KEY',\n        region: 'YOUR_AWS_REGION',\n      });\n\n      const polly = new AWS.Polly();\n      const response = await polly.synthesizeSpeech({\n        Text: textToSpeak,\n        OutputFormat: 'mp3',\n        VoiceId: 'Matthew',\n      }).promise();\n\n      const blob = new Blob([response.AudioStream], { type: 'audio/mpeg' });\n      const url = URL.createObjectURL(blob);\n\n      setAudioUrl(url);\n      setMessage('Audio synthesis complete.');\n    } catch (error) {\n      setMessage(\n        error.code === 'NoCredentialsError'\n          ? 'AWS credentials not found. Make sure to configure your AWS credentials.'\n          : `An error occurred: ${error.message}`\n      );\n    }\n  };\n\n  return (\n    <div>\n      <h2>Text to Speech Conversion</h2>\n      <button onClick={handleTextToSpeech}>Convert to Speech</button>\n      <p>{message}</p>\n      {audioUrl && (\n        <div>\n          <h3>Audio Output</h3>\n          <audio controls>\n            <source src={audioUrl} type=\"audio/mpeg\" />\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [transcribedText, setTranscribedText] = useState('');\n  const [apiResponse, setApiResponse] = useState('');\n\n  const handleTranscription = (text) => {\n    setTranscribedText(text);\n  };\n\n  const handleSendToApi = async () => {\n    try {\n      const serverEndpoint = 'YOUR_API_ENDPOINT';\n\n      const response = await axios.post(\n        serverEndpoint,\n        { text: transcribedText },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const apiResponseText = response.data.response;\n      setApiResponse(apiResponseText);\n\n      // Automatically start text-to-speech when the API response is received\n      if (apiResponseText) {\n        await handleTextToSpeech(apiResponseText);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      <SpeechToText onTranscription={handleTranscription} />\n      {transcribedText && (\n        <>\n          <button onClick={handleSendToApi}>Send to API</button>\n          <TextToSpeech textToSpeak={apiResponse} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}